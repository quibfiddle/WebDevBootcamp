DOM Manipulation
	Define what the DOM is

	Document Object Model. DOM is the interface between Javascript and the HTML and CSS of a website. The Document Object is an object in JS that has all the elements ofcss and html of a given webpage

The Process
	Select an element, and then Manipulate it. (sorta like selecting html elements using css, but done in javascript). So we can pull information from the Document Object, and assign them as varriables, like so

	var h1 = document.querySelector("h1");

	This code grabs the h1 object from the querySelector function from the document object, and assigns it to the js variable h1.

	Once you have selected an elements, you can Manipulate it, like so:

	h1.style.color = "pink";

	Executing this code, would cause the h1 elements to turn pink.

	Another example:

	var body = document.querySelector("body");
	var isBlue = false;


	setInterval(function(){
	if (isBlue) {
		body.stylebackground = "white";
	}
	else {
	body.style.background = "#3498db";
	}
	isBlue = !isBlue;
	}, 1000);

	This should change the color of the background from white to blue and blue to white each second. I could not replicate it with this code, as it just changed once and stoped

DOM Selectors

	We are going to be looking at the document object. Specifically, we are going to look at the 5 main methods used on the document object to select elements.

		document.getElementById()

			This method lets you select by the ID assigned to an HTML object. The folowing js code:

				var tag = document.getElementById("Highlight");

			would select the HTML code that has the specified "Highlight" id assigned to it, something like <li id="Highlight">List Item 1</li> could be selected and modified using that selector

		document.getElementsByClassName()

			Does the same thing as getElementByID(), but returns all the HTML items that have that class assigned to them as a node list in JS. A node list can be treated much like an array, but its not as feature rich as an array

		document.getElementsByTagName()

			Selects all HTML elements of a given Tag, so like all <li>s or all <h1>s, and returns them as a node list in JS

		document.querySelector()

			lets you select an HTML element as though you were selecting it with a CSS selector in a CSS document, remember the #idName or .className or tag check out the code:

				var h1 = document.querySelector("h1");
				var highlight = document.querySelector("#highlight")
				var bolded = document.querySelector(".bolded")

			the following code would select the first instance of an H1, the first instance of something assigned the Highlight and Bolded ID and Classes.

		document.querySelectorAll()

			Does the same thing as querySelector() but selects all instances of the searched for items

Exercise

	From the following code write 4 ways to select the first <p> tag.

	<!DOCTYPE html>
	<html lang="en">
	<head>
		<meta charset="UTF-8">
		<title>My Title</title>
	</head>
	<body>
		<h1>I am an h1!</h1>
		<p id="first" class="special">Hello</p>
		<p class="special">Goodbye</p>
		<p>Hi Again</p>
		<p id="last">Goodbye Again</p>
	</body>
	</html>
	

	var firstparagraph = document.getElementById("first");

	var firstparagraph = document.querySelector("p")

	var firstparagraph = document.querySelector("#first")

	var firstparagraph = document.querySelector(".special")

	var firstparagraph = document.querySelectorAll("p")[0]

DOM Manipulation
	Changing an element's style

		Once you have selected an element, you can manipulate its style by changing variables, look at the example code:

			var tag = document.getElementById("highlight");

			tag.style.color = "blue";
			tag.style.border = "10px solid red";
			tag.style.fontSize = "70px";
			tag.style.background = "yellow";
			tag.style.marginTop = "200px";

			The Style object for a given element is huge, it has a key for each value that can be edited via css.


	adding/removing classes

		Rather than directly manipulateing style with JS, we can define a CSS class and then toggle it on or off with JS.

			Instead of all this in your Javascript file:

				var tag = document.getElementById("highlight");

				tag.style.color = "blue";
				tag.style.border = "10px solid red";

			Difine a class in your CSS file

				.some-class {
					color: blue;
					border: 10px solid red;
				}

			Then reference it in your javascript file like so

				var tag = document.getElementById("highlight");

				tag.classList.add("some-class);



	changing the content of a tag

		textContent returns a string of all the text contained in a given element. If you wanted to return the content of the following html:

			<p>
  			 is an <strong>awesome</strong> paragraph 
			</p>

		Just use the following js

		var tag = document.querySelector("p");

			tag.textContent

		or if you wanted to edit it you could do

			tag.textContent = "blah blah blah";

			or

			tag.innerHTML 

		can also be used, like .textContent, but it will also include the inner HTML of a given element, like the <li>s if you selected a <ul>

	changing attributes(src,href,etc.)

		how to retrieve a value of an atribute

			We use the getAttribute() method to evalulate a given element object for its Attributes. For the following HTML, this is how we would select the element, and then ask for its attributes:

				<a href="www.google.com">I am a link</a>
				<img src="logo.png">

				var link = document.querySelector("a");
				link.getAttribute("href"); 

			will return the href attribulte for the first a tag; which is www.google.com

		how to change it

			attributes can be changed with the .setAttribute("attribute","Value") method. running the following code will change the a link from google to bing

				link.setAttribute("href","www.bing.com")


Code along
	Chaning the google image

	<img alt="Google" height="92" id="hplogo" src="/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png" srcset="/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png 1x, /images/branding/googlelogo/2x/googlelogo_color_272x92dp.png 2x" style="padding-top:109px" width="272" onload="window.lol&&lol()">

	Changing all the elements of a given page to a new value

	var links = document.getElementsByTagName("a")

	for(i = 0; i < links.length; i++){
		links[i].style.background = "pink";
	}