Four Main Objectives

	Evalutate complex logical expressions
		Bollions
		Logic
		comparison

	Write 3-part JS conditional Statements

	Write JS while loops and for loops

	Translate between while and for loops


Boolean Logic
	Evalutes statements and determines if its true or false

	Comparison Operators 
		(in these examples x = 5)
	Operator	Name							Example	â€‹	Result
	>			Greater than					x > 10		false
	>=			Greater than or equal to		x >= 5		true
	<			Less than						x < -50		false
	<=			Less than or equal to			x <= 100	true
	==			Equal to						x == "5"	true
	!=			Not equal to					x != "b"	true
	===			Equal value and type			x === "5"	false
	!==			Not equal value or equal type	x !== "5"	true

	Equality Operators
		== performs coercion while === does not. For example

		== will take the string "99" and say it is equal to the number 99; whereas === will not see the string value 99 as equall to the number 99, as they have different types (one is a string and the other is a number)

		Dont typically use ==

Logical Operators
	
	AND, OR and NOT
		(in these examples x=5 and y=9)
	Operator	Name	Example				Result
	&&			AND		x < 10 && x !== 5	false
	||			OR		y > 9 || x === 5	true	
	!			NOT		!(x === y)			true

Exercise

	Predict the solution to the following code:

	var x = 10;
	var y = "a"

	y === "b" || x >= 10

	Answer is True because x is greater than or equal to 10. y does not equal the type and value of b, but the staement is an or, so only one needs to be true for the statement to be true.

Exerise
	
	var x = 3;
	var y = 8;

	!(x == "3" || x === y) && !(y != 8 && x <= y)
	!(true || false) && !( false && True)
	!(true) && !(false)
	false && true
	False

Truthy and Falsy Values
	All values are inherently truthy or Falsy, 

JS Conditionals
	Making Decisions with code
		3 Javascript Conditional Keywords
			If 
				Executes code if true
			Else If
				Just like an if statement, but must be proceeded by an if statement. 
			Else
				Executes its code if none of the previous if or else if statements are true

		Qualifying those conditinals with realworld examples:

			If you are younger than 18 you cannont enter the venue

				if(age < 18){
				console.log("sorry, you are not old enough to enter the venue");
				}				

			If you are between 18 and 21 you can enter but cannont drink
				
				if(age < 18){
				console.log("sorry, you are not old enough to enter the venue");
				}	

				else if(age < 21){
				console.log("You can enter, but cannot drink");
				}		

			otherwise you can enter and drink

				if(age < 18){
				console.log("sorry, you are not old enough to enter the venue");
				}	

				else if(age < 21){
				console.log("You can enter, but cannot drink");
				}

				else {
				console.log("Come on in. You can drink.");
				}

Loops
	Undersatnd the Purpose of loops

	D.R.Y.
		Don't Repeat Yourself

	While Loops
		while(some condition){
		code
		}

		Similar to an if statement, except it repeats a given code block instead of running it just once


		var count = 1;

		while(count < 6){
		console.log("count is: " + count);

		count++
		}

		var str = "hello";

		var count = 0;

	exercices, evalaute what the code would do

		var num = 1;

		while(num <= 10) {
		console.log(num);
		num += 2;
		}

		//it will print out 1, 3 5... up to 9


	For Loops

		for(init; condition; step){
		code
		}

	printing the numbers 1 to 5 with a for loop

		for(var count=1; count < 6; count++){
		console.log(count);
		}

		the varriable "count" in that for loop only exists inside the for loop, as opposed to earlier while loops, where the variable was declered universally

